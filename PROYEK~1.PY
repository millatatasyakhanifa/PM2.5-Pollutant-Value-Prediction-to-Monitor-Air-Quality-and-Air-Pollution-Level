# -*- coding: utf-8 -*-
"""Proyek1_Predictive Analytics_PM2.5 Pollutant Value Prediction to Monitor Air Quality and Air Pollution Levels.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hGoZWpL5P5KJnBhOO0_0Sop_sv4Ah48_

# Predictive Analytics: PM2.5 Pollutant Value Prediction to Monitor Air Quality and Air Pollution Levels. 
*   Author: Millata Tasyakhanifa
*   Username: millatasyaa
*   Email: millatatasyakhanifa@gmail.com

#Pendahuluan
##### Proyek yang saya kerjakan berkaitan dengan isu kesehatan dan lingkungan yaitu memprediksi nilai PM2.5 pada 30 jam ke depan. PM2.5 merupakan salah satu polutan berbahaya yang dapat mencemari udara. Proyek ini dibuat untuk memenuhi Submission 1 pada course Machine Learning Terapan Dicoding.

#1. Import Library
"""

# Library untuk mengolah data
import pandas as pd
import numpy as np
import os

# Library untuk data visualization
import matplotlib.pyplot as plt
import seaborn as sns

# Library untuk data preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from keras.preprocessing.sequence import TimeseriesGenerator

# Library untuk membuat model
import tensorflow as tf
from keras.layers import Dense, LSTM

"""#2. Prepare Dataset"""

# Membuat folder .kaggle pada folder root
!rm -rf ~/.kaggle && mkdir ~/.kaggle/

# Menyalin file kaggle.json ke dalam folder .kaggle
!mv kaggle.json ~/.kaggle/kaggle.json
!chmod 600 ~/.kaggle/kaggle.json

# Download dataset menggunakan Kaggle CLI
!kaggle datasets download bappekim/air-pollution-in-seoul

# Mengekstrak berkas air-pollution-in-seoul.zip
!unzip /content/air-pollution-in-seoul.zip

"""#3. Data Understanding

3.1 Membaca Dataset dan Menampilkan 5 Data Pertama
"""

df = pd.read_csv('/content/AirPollutionSeoul/Measurement_summary.csv')
df.head()

"""3.2 Menampilkan Keterangan Kolom Dataset"""

# Menampilkan ringkasan singkat dari dataframe
df.info()

# Menampilkan shape data
df.shape

# Menampilkan jumlah rows dan columns
rows = df.shape[0]
columns = df.shape[1]

print("Number of rows: " + str(rows))
print("Number of columns: " + str(columns))

# Menampilkan kolom
df.columns

# Mengecek duplicate data
df.duplicated()

# Mengecek jumlah duplicate data
sum(df.duplicated())

# Mengecek jumlah missing value pada setiap kolom
df.isnull().sum()

# Mengecek jumlah unique value dari setiap kolom
df.nunique()

# menampilkan statistik dasar setiap kolom
df.describe()

"""3.3 Memvisualisasikan Data"""

# Membuat dan menampilkan plot untuk menampilkan nilai dari PM2.5
dates = df['Measurement date'].values[:30]
pollutan = df['PM2.5'].values[:30]
 
 
plt.figure(figsize=(15,5))
plt.plot(dates, pollutan)
plt.xticks(rotation=45)
plt.title('PM2.5 Plot',fontsize=20);

"""# 4. Data Preparation

4.1 Teknik Feature selection: Menghapus unnecessary column
"""

# Menghapus kolom Station code, Address, Latitude, Longitude, SO2, NO2, O3, CO, PM10, Measurement date
df = df.drop(['Station code', 'Address', 'Latitude', 'Longitude','SO2', 'NO2', 'O3', 'CO', 'PM10','Measurement date'], axis=1)

"""4.2 Teknik data Cleaning: Menghapus Outliers pada kolom PM2.5"""

# Mencari outliers
sns.boxplot(x=df['PM2.5'])

# Menghapus outliers
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR=Q3-Q1
df=df[~((df<(Q1-1.5*IQR))|(df>(Q3+1.5*IQR))).any(axis=1)]

# Cek shape dataset setelah menghapus outliers
df.shape

"""4.3 Teknik Train Test Split untuk membagi data"""

# Membagi data menjadi 90% data trening dan 10% data testing
values = df.values
train, test = train_test_split(values, test_size = 0.1, random_state = 123, shuffle = False)

# Menampilkan jumlah data train
train.shape

# Menampilkan jumlah data test
test.shape

"""4.4 Teknik data transforms: Scaling Nilai PM2.5 Menggunakan MinMaxScaler"""

# Scaling data
min_max_scaler = MinMaxScaler()
scaled_train = min_max_scaler.fit_transform(train)
scaled_test = min_max_scaler.fit_transform(test)

# Menampilkan data yang sudah di scaling
scaled_train

# Membuat generator menggunakan TimeseriesGenerator
# Menentukan berapa jam yang ingin diprediksi di masa depan
# Proyek ini akan memprediksi PM2.5 pada 30 jam ke depan
n_input = 30
n_feature = 1
generator = TimeseriesGenerator(scaled_train, scaled_train, length = n_input, batch_size=128)

# Membuat test_generator untuk digunakan pada saat prediksi menggunakan model terbaik
test_generator = TimeseriesGenerator(scaled_test, scaled_test, length = n_input, batch_size=128)

"""#5. Membuat Model

5.1 Model LSTM
"""

# Membuat model LSTM
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(50, activation="relu", return_sequences=True, input_shape=(n_input, n_feature)),
  tf.keras.layers.LSTM(60, activation="relu", return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

# Menampilkan summary dari model yang dibuat
model.summary()

# Compiling model 
optimizer = tf.keras.optimizers.SGD(learning_rate=1e-3, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

# Training model dengan 10 epochs
history = model.fit(generator, 
                    epochs=10)

"""5.2 Model CNN"""

# Membuat model CNN
model_CNN = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5, strides=1, padding="causal", activation="relu",
                               input_shape=(n_input, n_feature)),
        tf.keras.layers.MaxPooling1D(pool_size=2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(64, activation="relu"),
        tf.keras.layers.Dense(10, activation="relu"),
        tf.keras.layers.Dense(1)
])

# Menampilkan summary dari model yang dibuat
model_CNN.summary()

# Compiling model 
optimizer = tf.keras.optimizers.SGD(learning_rate=1e-4, momentum=0.9)
model_CNN.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

# Training model dengan 10 epochs
history_CNN = model_CNN.fit(generator, 
                            epochs=10)

"""5.3 Mencoba Membuat Prediksi Menggunakan Model CNN
- Model CNN dipilih karena menghasilkan nilai loss dan nilai MAE yang lebih kecil dibandingkan dengan model LSTM
"""

model_CNN.evaluate(test_generator, verbose=0)

predictions = model_CNN.predict_generator(test_generator)

predictions.shape[0]

predictions

"""#6. Evaluasi Model

6.1 Membuat Plot Loss dan MAE Selama Proses Training untuk Model LSTM
"""

# Menampilkan plot loss pada proses training
plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'], label='Train Loss')
plt.title('Loss graph of LSTM model')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Menampilkan plot MAE pada proses training
plt.figure(figsize=(10, 6))
plt.plot(history.history['mae'], label='Train MAE')
plt.title('MAE graph of LSTM model')
plt.xlabel('Epochs')
plt.ylabel('MAE')
plt.legend()

"""6.2 Membuat Plot Loss dan MAE Selama Proses Training untuk Model CNN"""

# Menampilkan plot loss pada proses training
plt.figure(figsize=(10, 6))
plt.plot(history_CNN.history['loss'], label='Train Loss')
plt.title('Loss graph of CNN model')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Menampilkan plot MAE pada proses training
plt.figure(figsize=(10, 6))
plt.plot(history_CNN.history['mae'], label='Train MAE')
plt.title('MAE graph of CNN model')
plt.xlabel('Epochs')
plt.ylabel('MAE')
plt.legend()

"""6.3 Membuat Plot untuk Hasil Prediksi Menggunakan Model CNN """

test[:,1:][n_input:]

df_predict = pd.concat([pd.DataFrame(predictions), pd.DataFrame(test[:,1:][n_input:])], axis=1)

rev_transform=min_max_scaler.inverse_transform(df_predict)

rev_transform

df_final = df[predictions.shape[0]*-1:]
df_final.count()

df_final['PM2.5_predict'] = rev_transform[:,0]
df_final

df_final[['PM2.5','PM2.5_predict']][:30].plot()

"""# Penutup
Pembuatan model untuk memprediksi data PM2.5 telah selesai. Model ini diharapkan dapat membantu memprediksi data PM2.5 pada 30 jam ke depan karena PM2.5 merupakan salah satu polutan berbahaya yang dapat mencemari udara dan mempengaruhi kesehatan manusia. Selain itu, beberapa pengembangan dapat dilakukan untuk membuat model ini menjadi lebih baik. Pengembangan tersebut diantaranya yaitu membuat arsitektur model LSTM dan model CNN yang lebih kompleks dengan menambahkan layer pada model LSTM dan model CNN yang sudah dibuat.

# Referensi




*   Dokumentasi Matplotlib:https://matplotlib.org
*   Dokumentasi Seaborn:https://seaborn.pydata.org
*   Dokumentasi Tensorflow:https://www.tensorflow.org
*   Dataset:https://www.kaggle.com/bappekim/air-pollution-in-seoul
*   Referensi lainnya:
*   https://github.com/fahmij8/ML-Exercise/blob/main/MLT-1/MLT_Proyek_Submission_1.ipynb
*   https://youtu.be/4FmVIpcwl4k
"""